{"ast":null,"code":"var _jsxFileName = \"/Users/bheesha.k/Desktop/Zwappr-emiko-copy/zwappr/src/Home.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import { isLoggedIn, removeUserSession } from './AuthServices';\n// import axios from 'axios';\n// import {DateSelector} from './DateSelector';\n// import DatePicker from 'react-datepicker';\n// import 'react-datepicker/dist/react-datepicker.css';\n// import { Link, useNavigate } from 'react-router-dom';\n// import './home.css';\n// import { ChakraProvider, IconButton, Input, Select, Button, Alert,AlertIcon, AlertTitle, useDisclosure, Box, Spinner, Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, useToast } from '@chakra-ui/react';\n// import { Avatar, AvatarBadge, AvatarGroup } from '@chakra-ui/react'\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { getUser } from './AuthServices';\n// import { faThumbsDown, faThumbsUp, faCircleInfo, faPaperPlane, faCircleUser, faRightFromBracket } from '@fortawesome/free-solid-svg-icons';\n\n// import {\n//   Popover,\n//   PopoverTrigger,\n//   PopoverContent,\n//   PopoverHeader,\n//   PopoverBody,\n//   PopoverFooter,\n//   PopoverArrow,\n//   PopoverCloseButton,\n//   PopoverAnchor,\n// } from '@chakra-ui/react'\n\n// function Home() {\n//   const usery = getUser() || {};\n//   console.log(usery)\n//     const [allListings, setAllListings] = useState([]);\n//     const [displayedListings, setDisplayedListings] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [loading, setLoading] = useState(true);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [message, setMessage] = useState('');\n//     const [searchQuery, setSearchQuery] = useState('');\n//     const [selectedListing, setSelectedListing] = useState(null);\n//     const { isOpen: isAddOpen, onOpen: onAddOpen, onClose: onAddClose } = useDisclosure();\n//     const { isOpen: isEnlargedOpen, onOpen: onEnlargedOpen, onClose: onEnlargedClose } = useDisclosure();\n//     const [selectedImage, setSelectedImage] = useState(null);\n//     const [selectedFilter, setSelectedFilter] = useState('None');\n//     const toast = useToast();\n//     const [reservationDetails, setReservationDetails] = useState({\n//         start_date: null,\n//         end_date: null,\n//     });\n//     const [itemDetails, setItemDetails] = useState({\n//       username: '',\n//       email: '',\n//       image_url: '',\n//       location: '',\n//       category: '',\n//       item_name: '',\n//       price_per_day: '',\n//       description: '',\n//       start_date: null,\n//       end_date: null\n//   });\n\n//   //UseEffects////////////////////////////////////////////////////\n//     useEffect(() => {\n//         getAllListings(); // Fetch listings on mount\n//     }, []);\n\n//   const navigate = useNavigate();\n//   const handleLogout = () => {\n//     removeUserSession(); // Remove user session\n//     navigate('/'); // Redirect to the home page or login page\n//   };\n\n//   const handleSearch = (e) => {\n//     const query = e.target.value.toLowerCase();\n//     setSearchQuery(query);\n//     if (query === '') {\n//         setDisplayedListings(allListings);\n//     } else {\n//         const filteredListings = allListings.filter(listing =>\n//             listing.item_name && listing.item_name.toLowerCase().includes(query)\n//         );\n//         setDisplayedListings(filteredListings);\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     const { id, value } = e.target;\n//     setItemDetails(prevDetails => ({\n//         ...prevDetails,\n//         [id]: value\n//     }));\n//   };\n\n//   const handleImageChange = (event) => {\n//     const file = event.target.files[0];\n//     setSelectedImage(file); // Store the selected file in state\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault(); // Prevent the default form submission behavior\n\n//     // Validate the form fields\n//     if (typeof itemDetails.item_name === 'string' && !itemDetails.item_name.trim()) {\n//         setError('Please enter a name.');\n//         return;\n//     }\n\n//     if (!itemDetails.category || itemDetails.category === 'None') {\n//         setError('Please select a category.');\n//         return;\n//     }\n\n//     if (!itemDetails.location) {\n//       setError('Please select a location.');\n//       return;\n//   }\n\n//     if (!itemDetails.start_date) {\n//         setError('Please select a start date.');\n//         return;\n//     }\n\n//     if (!itemDetails.end_date) {\n//         setError('Please select an end date.');\n//         return;\n//     }\n\n//     if (new Date(itemDetails.start_date) > new Date(itemDetails.end_date)) {\n//         setError('Start date cannot be later than the end date.');\n//         return;\n//     }\n\n//     if (!selectedImage) {\n//         setError('Please select an image.');\n//         return;\n//     }\n\n//     setIsLoading(true);\n//     setError('');\n\n//     try {\n//         // Creating a FormData object to send the image\n//         const formData = new FormData();\n//         formData.append('media', selectedImage);\n\n//         // Send the image to the backend\n//         const response = await axios.post('http://localhost:5001/uploadToCloudinary', formData, {\n//             headers: {\n//                 'Content-Type': 'multipart/form-data',\n//             },\n//         });\n\n//         console.log('Image uploaded successfully:', response.data.url);\n\n//         // Add the uploaded image URL to itemDetails\n//         const imageUrl = response.data.url;\n//         const updatedItemDetails = { ...itemDetails, image_url: imageUrl, username: usery.username, user_id: usery.user_id, email: usery.email };\n\n//         // Send `updatedItemDetails` to the backend to save the listing\n//         console.log('Final item details:', updatedItemDetails);\n\n//         const response2 = await fetch('http://localhost:5001/addListing', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify(updatedItemDetails),\n//         });\n\n//         if (response2.ok) {\n//             console.log('Item details added to database successfully.');\n//             setMessage('Item added successfully!');\n//             onAddClose();//modal is closed here and success toast is displayed\n//             toast({\n//                 title: 'Success',\n//                 description: 'Your Listing has been added',\n//                 status: 'success',\n//                 duration: 3000,\n//                 isClosable: true,\n//             });\n//             getAllListings();\n//         } else {\n//             const errorData = await response2.json();\n//             console.error('Error adding item details:', errorData.message);\n//             setError('Failed to add item. Image size might be too large. Please try again.');\n//         }\n\n//         setIsLoading(false);\n//     } catch (error) {\n//         console.error('Error uploading item:', error);\n//         setError('Failed to upload item. Please try again.');\n//         setIsLoading(false);\n//     }\n\n//     setItemDetails({\n//         username: '',\n//         email: '',\n//         image_url: '',\n//         location: '',\n//         category: '',\n//         item_name: '',\n//         price_per_day: '',\n//         description: '',\n//         start_date: null,\n//         end_date: null\n//     });\n// };\n\n// const handleFilterChange = (e) => {\n//   const value = e.target.value;\n//   setSelectedFilter(value);\n//   handleFilter(value);\n// };\n\n// const handleFilter = (filter) => {\n//   let filteredListings = [...allListings];\n\n//   if (filter === 'Reserved Items') {\n//     // Filter listings where the current user's user_id matches the current_renter field\n//     filteredListings = allListings.filter(\n//       (listing) => listing.current_renter && listing.current_renter === usery.user_id\n//     );\n//     console.log('Reserved items:', filteredListings);\n//   } else if (filter !== 'None') {\n//     // Filter listings by category\n//     filteredListings = allListings.filter((listing) => listing.category === filter);\n//   }\n\n//   // Apply search query filter if applicable\n//   if (searchQuery !== '') {\n//     filteredListings = filteredListings.filter((listing) =>\n//       listing.item_name.toLowerCase().includes(searchQuery)\n//     );\n//   }\n\n//   setDisplayedListings(filteredListings);\n// };\n\n// const cancelReservation = async () => {\n//   setIsLoading(true);\n//   setError('');\n\n//   try {\n//     const reservationData = {\n//       item_id: selectedListing?.item_id,\n//       renter_id: usery.user_id,\n//     };\n\n//     const response = await fetch('http://localhost:5001/cancelReservation', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(reservationData),\n//     });\n\n//     if (response.ok) {\n//       console.log('Reservation cancelled successfully.');\n//       setMessage('Reservation cancelled successfully!');\n//       toast({\n//         title: 'Success',\n//         description: 'Your reservation has been cancelled.',\n//         status: 'success',\n//         duration: 3000,\n//         isClosable: true,\n//       });\n//       onEnlargedClose(); // Close the enlarged listing modal\n//       setSelectedListing(null); // Reset selected listing\n//       getAllListings(); // Refresh listings\n//     } else {\n//       const errorData = await response.json();\n//       console.error('Error cancelling reservation:', errorData.message);\n//       setError('Failed to cancel reservation. Please try again.');\n//       toast({\n//         title: 'Error',\n//         description: 'Failed to cancel reservation. Please try again.',\n//         status: 'error',\n//         duration: 3000,\n//         isClosable: true,\n//       });\n//     }\n//   } catch (error) {\n//     console.error('Error cancelling reservation:', error);\n//     setError('Failed to cancel reservation. Please try again.');\n//     toast({\n//       title: 'Error',\n//       description: 'Failed to cancel reservation. Please try again.',\n//       status: 'error',\n//       duration: 3000,\n//       isClosable: true,\n//     });\n//   } finally {\n//     setIsLoading(false);\n//   }\n// }\n\n// const deleteListing = async () => {\n//   setIsLoading(true);\n//   setError('');\n\n//   try {\n//     const listingData = {\n//       item_id: selectedListing?.item_id,\n//       user_id: usery.user_id,\n//     };\n\n//     const response = await fetch('http://localhost:5001/removeListing', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(listingData),\n//     });\n\n//     if (response.ok) {\n//       console.log('Listing deleted successfully.');\n//       setMessage('Listing deleted successfully!');\n//       toast({\n//         title: 'Success',\n//         description: 'Your listing has been deleted.',\n//         status: 'success',\n//         duration: 3000,\n//         isClosable: true,\n//       });\n//       onEnlargedClose(); // Close the enlarged listing modal\n//       setSelectedListing(null); // Reset selected listing\n//       getAllListings(); // Refresh listings\n//     } else {\n//       const errorData = await response.json();\n//       console.error('Error deleting listing:', errorData.message);\n//       setError('Failed to delete listing. Please try again.');\n//       toast({\n//         title: 'Error',\n//         description: 'Failed to delete listing. Please try again.',\n//         status: 'error',\n//         duration: 3000,\n//         isClosable: true,\n//       });\n//     }\n//   } catch (error) {\n//     console.error('Error deleting listing:', error);\n//     setError('Failed to delete listing. Please try again.');\n//     toast({\n//       title: 'Error',\n//       description: 'Failed to delete listing. Please try again.',\n//       status: 'error',\n//       duration: 3000,\n//       isClosable: true,\n//     });\n//   } finally {\n//     setIsLoading(false);\n//   }\n// }\n\n// const enlargeListing = (listing) => {\n//   setSelectedListing(listing);\n//   onEnlargedOpen();\n// };\n\n// async function handleSubmitReservation() {\n//   console.log('Submitting reservation:');\n//   setIsLoading(true);\n//   setError('');\n\n//   // Validate the reservation dates\n//   if (!reservationDetails.start_date || !reservationDetails.end_date) {\n//     setError('Please select both start and end dates.');\n//     toast({\n//       title: 'Error',\n//       description: 'Please select both start and end dates.',\n//       status: 'error',\n//       duration: 3000,\n//       isClosable: true,\n//     });\n//     setIsLoading(false);\n//     return;\n//   }\n\n//   const selectedStartDate = new Date(reservationDetails.start_date);\n//   const selectedEndDate = new Date(reservationDetails.end_date);\n//   const listingStartDate = new Date(selectedListing?.start_date);\n//   const listingEndDate = new Date(selectedListing?.end_date);\n\n//   if (selectedStartDate < listingStartDate) {\n//     setError('Reservation start date cannot be before the listing start date.');\n//     toast({\n//       title: 'Error',\n//       description: 'Reservation start date cannot be before the listing start date.',\n//       status: 'error',\n//       duration: 3000,\n//       isClosable: true,\n//     });\n//     setIsLoading(false);\n//     return;\n//   }\n\n//   if (selectedEndDate > listingEndDate) {\n//     setError('Reservation end date cannot be after the listing end date.');\n//     toast({\n//       title: 'Error',\n//       description: 'Reservation end date cannot be after the listing end date.',\n//       status: 'error',\n//       duration: 3000,\n//       isClosable: true,\n//     });\n//     setIsLoading(false);\n//     return;\n//   }\n\n//   try {\n//     // Send reservation details to the backend\n//     const reservationData = {\n//       itemowner_id: selectedListing?.user_id,\n//       item_id: selectedListing?.item_id,\n//       renter_id: usery.user_id,//renter is the cuurent user\n//       reservation_start_date: reservationDetails.start_date,\n//       reservation_end_date: reservationDetails.end_date,\n//     };\n\n//     const response = await fetch('http://localhost:5001/addReservation', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(reservationData),\n//     });\n\n//     if (response.ok) {\n//       console.log('Reservation added successfully.');\n//       setMessage('Reservation added successfully!');\n//       toast({\n//         title: 'Success',\n//         description: 'Your reservation has been added.',\n//         status: 'success',\n//         duration: 3000,\n//         isClosable: true,\n//       });\n//       onEnlargedClose(); // Close the enlarged listing modal\n//       setReservationDetails({ start_date: null, end_date: null }); // Reset reservation details\n//       setSelectedListing(null); // Reset selected listing\n//       setDisplayedListings(allListings); // Reset displayed listings\n//       getAllListings(); // Refresh listings\n//     } else {\n//       const errorData = await response.json();\n//       console.error('Error adding reservation:', errorData.message);\n//       setError('Failed to add reservation. Please try again.');\n//       toast({\n//         title: 'Error',\n//         description: 'Failed to add reservation. Please try again.',\n//         status: 'error',\n//         duration: 3000,\n//         isClosable: true,\n//       });\n//     }\n//   } catch (error) {\n//     console.error('Error submitting reservation:', error);\n//     setError('Failed to submit reservation. Please try again.');\n//     toast({\n//       title: 'Error',\n//       description: 'Failed to submit reservation. Please try again.',\n//       status: 'error',\n//       duration: 3000,\n//       isClosable: true,\n//     });\n//   } finally {\n//     setIsLoading(false);\n//   }\n// }\n\n//   async function getAllListings (){\n//     try{\n//         const response = await fetch(`http://localhost:5001/getItems`, {\n//             method: 'GET',\n//             headers: { 'Content-Type': 'application/json',\n//                 \"Access-Control-Allow-Origin\": \"*\",\n//                 \"Access-Control-Allow-Headers\": \"Content-Type\",\n//                 \"Access-Control-Allow-Methods\": \"OPTIONS,POST,GET\"\n//             },\n//         });\n\n//         const data = await response.json();\n//         console.log('Response is HERE:', data);\n\n//         if (response.ok) {\n//             console.log('All Listings retrieved:', data);\n\n//             // Update the state with the retrieved movie cards\n//             setAllListings(data.map(listing => ({ ...listing })));\n//             console.log('All Listings displayed here:', allListings);\n//             setDisplayedListings(data); \n\n//         } else{\n//             console.error('Error retrieving movie card:', data.message);\n//             setError('Error retrieving movie cards :-(');\n//         }\n\n//     } catch (error) {\n//             console.log('An error getting cards occurred. Please try again.');\n//         }\n\n// }\n\n//  // return (\n//     // <div className=\"App\">\n//     //   <div className='topbar'>\n//     //     <div className='titleandlogo'><img width=\"52\" height=\"52\" src=\"https://img.icons8.com/metro/52/swap.png\" alt=\"swap\"/><p id='title'>Zwappr</p></div>\n//        // {\n//           /* <div className=\"top-container\">\n//   <div className=\"tagline\">For the small things.</div>\n//   <div className=\"modern-search-bar\">\n//     <input\n//       type=\"text\"\n//       placeholder=\"Search listings...\"\n//       value={searchQuery}\n//       onChange={handleSearch}\n//     />\n//     <img src=\"https://img.icons8.com/ios-filled/20/000000/search--v1.png\" alt=\"Search\" className=\"search-icon\" />\n//   </div>\n// </div>\n\n// <div className=\"category-bar\">\n//   {[\n//     { name: 'Furniture', icon: 'furniture.png' },\n//     { name: 'Games', icon: 'games.png' },\n//     { name: 'Clothing', icon: 'clothing.png' },\n//     { name: 'Home Decor', icon: 'homedecor.png' },\n//     { name: 'Party Supplies', icon: 'party.png' }, \n//     { name: 'Cameras & Photography', icon: 'camersandphotography.png' },\n//     { name: 'Camping & Outdoors', icon: 'campingandoutdoors.png' },\n//     { name: 'Catering Equipment', icon: 'cateringequipment.png' },\n//   ].map(category => (\n//     <div className=\"category\" key={category.name}>\n//       <img src={require(`./assets/${category.icon}`)} alt={category.name} />\n//       <span>{category.name}</span>\n//     </div>\n//   ))}\n// </div> */}\n\n// <div className=\"top-container\">\n//   <div className=\"header-row\">\n//     <div className=\"logo-section\">\n//       <img src=\"https://img.icons8.com/metro/52/swap.png\" alt=\"swap\" />\n//       <span className=\"logo-text\">Zwappr</span>\n//     </div>\n\n//     <div className=\"search-section\">\n//       <p className=\"tagline\">For the small things.</p>\n//       <div className=\"modern-search-bar\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Search listings...\"\n//           value={searchQuery}\n//           onChange={handleSearch}\n//         />\n//         <img className=\"search-icon\" src=\"https://img.icons8.com/ios-glyphs/30/search--v1.png\" alt=\"search\" />\n//       </div>\n//     </div>\n\n//     <div className=\"icon-buttons\">\n//       <button className=\"circle-button\"><FontAwesomeIcon icon={faCircleUser} /></button>\n//       <button className=\"circle-button\"><FontAwesomeIcon icon={faCircleInfo} /></button>\n//     </div>\n//   </div>\n\n//   <div className=\"category-bar\">\n//     <div className=\"category\"><img src={require('./assets/furniture.png')} alt=\"Furniture\" /><span>Furniture</span></div>\n//     <div className=\"category\"><img src={require('./assets/games.png')} alt=\"Games\" /><span>Games</span></div>\n//     <div className=\"category\"><img src={require('./assets/clothing.png')} alt=\"Clothing\" /><span>Clothing</span></div>\n//     <div className=\"category\"><img src={require('./assets/homedecor.png')} alt=\"Home Decor\" /><span>Home Decor</span></div>\n//     <div className=\"category\"><img src={require('./assets/party.png')} alt=\"Party Supplies\" /><span>Party Supplies</span></div>\n//     <div className=\"category\"><img src={require('./assets/camersandphotography.png')} alt=\"Cameras\" /><span>Cameras & Photography</span></div>\n//     <div className=\"category\"><img src={require('./assets/campingandoutdoors.png')} alt=\"Camping\" /><span>Camping & Outdoors</span></div>\n//     <div className=\"category\"><img src={require('./assets/cateringequipment.png')} alt=\"Catering\" /><span>Catering Equipment</span></div>\n//   </div>\n// </div>\n\n//         <div className='profileicon'>\n//         <Popover >\n//             <PopoverTrigger>\n//                 <Button  _hover={{ bg: '#3eaff6' }} marginTop='5px'backgroundColor=\" rgb(80, 78, 78);\"><FontAwesomeIcon size=\"2xl\" style={{color: \"white\",}} icon={faCircleUser} /></Button>\n//             </PopoverTrigger>\n//             <PopoverContent width='50vw'backgroundColor=\" rgb(80, 78, 78);\">\n//                 <PopoverArrow />\n//                 <PopoverCloseButton />\n//                 <PopoverHeader>\n//                     <Avatar\n//                         size='lg'\n//                         name={usery?.username || 'Guest'} // Use 'Guest' if usery.username is undefined\n//                         src='https://bit.ly/broken-link'\n//                     />\n//                     <p id='pruh'><b>Hello, {usery?.username || 'Guest'}</b></p>\n//                     <p>Welcome!</p>\n//                 </PopoverHeader>\n//                 <PopoverBody>{isLoggedIn() && (<button onClick={handleLogout} className=\"logout_butt\">Logout <FontAwesomeIcon size='sm' icon={faRightFromBracket} style={{color: \"white\",}} /></button>)}</PopoverBody>\n//             </PopoverContent>\n//         </Popover>\n//         <Popover >\n//             <PopoverTrigger>\n//                 <Button _hover={{ bg: '#3eaff6' }} className=\"usecontrol\"marginTop='5px'backgroundColor=\" rgb(80, 78, 78);\"><FontAwesomeIcon icon={faCircleInfo} size=\"2xl\" style={{color: \"white\",}} /></Button>\n//             </PopoverTrigger>\n//             <PopoverContent width='50vw'backgroundColor=\" rgb(80, 78, 78);\">\n//                 <PopoverArrow />\n//                 <PopoverCloseButton />\n//                 <PopoverHeader>Info</PopoverHeader>\n//                 <PopoverBody>\n//                     <ul>\n//                         <li>Press the Add Listing button to post a listing.</li>\n//                         &nbsp;\n//                         <li>Click on each listing to see more.</li>\n//                     </ul>\n//                 </PopoverBody>\n//             </PopoverContent>\n//         </Popover>\n//         </div>\n//       </div>\n\n//       <div className='buttons'>\n//       <Button id='newlisting' color='black' fontSize='14px' colorScheme='white;' onClick={onAddOpen}>+ Add New Listing</Button>\n//         <div id='filter'>Filter\n//         <Select iconSize='14px' id='filter' placeholder='' onChange={handleFilterChange} bg=\"white\" color=\"black\" border=\"none\">\n//             <option value='None'>None</option>\n//             <option value='Reserved Items'>Reserved items</option>\n//             <option value='Party Supplies'>Party Supplies</option>\n//             <option value='Camera Equipment'>Camera Equipment</option>\n//             <option value='Furniture'>Furniture</option>\n//             <option value='Games'>Games</option>\n//             <option value='Clothing'>Clothing</option>\n//             <option value='Home Decor'>Home Decor</option>\n//             <option value='Camping & Outdoors'>Camping & Outdoors</option>\n//             <option value='Catering Equipment'>Catering Equipment</option>\n//             <option value='Books'>Books</option>\n//             <option value='Other'>Other</option>\n\n//         </Select>\n\n//         </div>\n//       </div>\n\n//       <div className ='listings_box'>\n//         <div className='sub_listings_box'>\n//           {displayedListings.map((listing) => (\n//             <div key={listing.item_id} onClick={() => enlargeListing(listing)}className='listing'>\n\n//               <div id='listing_img'>\n//                 <img src={listing.image_url} alt={listing.title} className='listing_image' id='listing_img'/>\n//               </div>\n//               <div id='listing_info'>\n//               <div id='i_name_and_price'><h3>{listing.item_name}</h3> <h3>{listing.price_per_day}</h3> </div>\n//               <p id='listing_location'>{listing.location}</p>\n//               <Avatar colorPalette='black' size='2xs'name={listing.username} src='https://bit.ly/broken-link' />&nbsp;<b>{listing.username}</b>\n\n//               </div>\n\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n//       {/* Add Listing Modal */}\n//       <Modal id='listing_entry' isOpen={isAddOpen} onClose={onAddClose}>\n//                     <ModalOverlay />\n//                     <ModalContent>\n//                         <ModalHeader>Add an Item for Rent!</ModalHeader>\n//                         <ModalCloseButton />\n//                         <ModalBody>\n\n//                                 <Box id='i_name'>\n//                                     Item Name:<Input id='item_name' focusBorderColor='black' placeholder='e.g. Camera' value={itemDetails.item_name} onChange={handleChange} />\n//                                 </Box>\n//                                 <Box id='i_price'>\n//                                     Price Per Day ($):<Input id='price_per_day' focusBorderColor='black' placeholder='e.g. 50' value={itemDetails.price_per_day} onChange={handleChange} />\n//                                 </Box>\n//                                 <Box id='i_category'>\n//                                     Category: \n//                                     <Select id='category' focusBorderColor='black' iconSize='20px' className='item_filter' placeholder='None' value={itemDetails.category} onChange={handleChange}>\n//                                         <option value='Party Supplies'>Party Supplies</option>\n//                                         <option value='Camera Equipment'>Camera Equipment</option>\n//                                         <option value='Furniture'>Furniture</option>\n//                                         <option value='Games'>Games</option>\n//                                         <option value='Clothing'>Clothing</option>\n//                                         <option value='Home Decor'>Home Decor</option>\n//                                         <option value='Camping & Outdoors'>Camping & Outdoors</option>\n//                                         <option value='Catering Equipment'>Catering Equipment</option>\n//                                         <option value='Books'>Books</option>\n//                                         <option value='Other'>Other</option>\n//                                     </Select>\n//                                 </Box>\n\n//                                 <Box id='i_location'>\n//                                     Location: \n//                                     <Select id='location' focusBorderColor='black' iconSize='20px' className='item_location' placeholder='None' value={itemDetails.location} onChange={handleChange}>\n//                                       <option value=\"\">Select Dorm / Building</option>\n//                                       <option value=\"Cascade Hall\">Cascade Hall</option>\n//                                       <option value=\"Aurora Hall\">Aurora Hall</option>\n//                                       <option value=\"Olympus Hall\">Olympus Hall</option>\n//                                       <option value=\"Yamnuska Hall\">Yamnuska Hall</option>\n//                                       <option value=\"Global Village\">Global Village</option>\n//                                       <option value=\"Kananaskis Hall\">Kananaskis Hall</option>\n//                                       <option value=\"Rundle Hall\">Rundle Hall</option>\n//                                       <option value=\"Crowsnest Hall\">Crowsnest Hall</option>\n//                                       <option value=\"International House\">International House</option>\n//                                       <option value=\"Varsity Courts\">Varsity Courts</option>\n//                                     </Select>\n//                                 </Box>\n\n//                                 <Box id=\"i_img\">\n//                                     Image:\n//                                     <Input\n//                                         id=\"item_image\"\n//                                         focusBorderColor=\"black\"\n//                                         type=\"file\"\n//                                         onChange={handleImageChange} // Capture the selected image into a useState\n//                                     />\n//                                 </Box>\n//                                 <Box id='i_description'>\n//                                     About:<Input id='description' focusBorderColor='black' placeholder='e.g. Say something about your listing...' value={itemDetails.description} onChange={handleChange} />\n//                                 </Box>\n//                                 <Box id='i_start_date'>\n//                                     Start Date:\n//                                     <DatePicker\n//                                         selected={itemDetails.start_date}\n//                                         onChange={(date) => setItemDetails(prevDetails => ({\n//                                             ...prevDetails,\n//                                             start_date: date.toISOString() // Save as ISO string\n//                                         }))}\n//                                         dateFormat=\"yyyy-MM-dd\"\n//                                         placeholderText=\"Select a start date\"\n//                                         focusBorderColor='black'\n//                                     />\n//                                 </Box>\n//                                 <Box id='i_end_date'>\n//                                     End Date:\n//                                     <DatePicker\n//                                         selected={itemDetails.end_date}\n//                                         onChange={(date) => setItemDetails(prevDetails => ({\n//                                             ...prevDetails,\n//                                             end_date: date.toISOString() // Save as ISO string\n//                                         }))}\n//                                         dateFormat=\"yyyy-MM-dd\"\n//                                         placeholderText=\"Select an end date\"\n//                                         focusBorderColor='black'\n//                                     />\n//                                 </Box>\n\n//                             {error && (\n//                                 <Alert status='error' mt={4}>\n//                                     <AlertIcon />\n//                                     <AlertTitle>{error}</AlertTitle>\n//                                 </Alert>\n//                             )}\n//                         </ModalBody>\n//                         <ModalFooter>\n//                             <Button colorScheme='blue' mr={3} onClick={onAddClose}>\n//                                 Close\n//                             </Button>\n//                             <Button\n//                                 id='submit_details'\n//                                 variant='ghost'\n//                                 onClick={handleSubmit}\n//                                 isLoading={isLoading}\n//                                 loadingText='Submitting'\n//                                 spinner={<Spinner size=\"sm\" />}\n//                             >\n//                                 Submit\n//                             </Button>\n//                         </ModalFooter>\n//                     </ModalContent>\n//                 </Modal>\n\n//       {/* Enlarged Listing Modal */}\n\n//       <Modal className='enlargedCard' isOpen={isEnlargedOpen} onClose={onEnlargedClose} size='lg'>\n//                     <ModalOverlay />\n//                     <ModalContent bg=\"white\" color=\"black\" overflowY='scroll' maxWidth='100%' maxHeight='80%'>\n//                         <ModalHeader display=\"flex\" flexDirection=\"column\" alignItems='center' textAlign=\"center\"><div className='titleandlogo'><img width=\"52\" height=\"52\" src=\"https://img.icons8.com/metro/52/swap.png\" alt=\"swap\"/><p id='title'>Zwappr</p></div></ModalHeader>\n//                         <ModalCloseButton />\n//                         <ModalBody display=\"flex\" flexDirection=\"row\" alignItems=\"center\" marginLeft=\"5%\" marginRight=\"5%\" height=\"fit-content\" overflow-y=\"scroll\" justifyContent=\"space-evenly\">\n//                             <div id='left_side'>\n//                               <p id='listing_name'>{selectedListing?.item_name}</p>\n//                               <img src={selectedListing?.image_url} alt={selectedListing?.item_name} className='listing_image' id='enlarged_img'/>\n//                               <Avatar colorPalette='black' size='md'name={selectedListing?.username} src='https://bit.ly/broken-link' />&nbsp;<h2><b>{selectedListing?.username}</b></h2>\n//                               <p id='listing_description'>{selectedListing?.description}</p>\n//                               <p id='listing_email'><b>Email: {selectedListing?.email}</b></p>\n//                             </div>\n//                             <div id='right_side'>\n//                             <div id='reservation_details'>\n//                               <h2><b>${selectedListing?.price_per_day}</b>/day</h2>\n//                               <p id='listing_location'><b>Location:</b> {selectedListing?.location}</p>\n//                               <p id='listing_dates'>\n//                                 <b>Available From:</b> {new Date(selectedListing?.start_date).toLocaleDateString('en-GB')} \n//                                 <b>To:</b> {new Date(selectedListing?.end_date).toLocaleDateString('en-GB')}\n//                               </p>\n//                               <div>\n//                                 From:\n//                                 <DatePicker\n//                                   selected={reservationDetails.start_date}\n//                                   onChange={(date) => setReservationDetails(prevDetails => ({\n//                                     ...prevDetails,\n//                                     start_date: date.toISOString() // Save as ISO string\n//                                   }))}\n//                                   dateFormat=\"yyyy-MM-dd\"\n//                                   placeholderText=\"Select a start date\"\n//                                   focusBorderColor='black'\n//                                 />\n//                               </div>\n//                               <div>\n//                                 To:\n//                                 <DatePicker\n//                                   selected={reservationDetails.end_date}\n//                                   onChange={(date) => setReservationDetails(prevDetails => ({\n//                                     ...prevDetails,\n//                                     end_date: date.toISOString() // Save as ISO string\n//                                   }))}\n//                                   dateFormat=\"yyyy-MM-dd\"\n//                                   placeholderText=\"Select an end date\"\n//                                   focusBorderColor='black'\n//                                 />\n//                               </div>\n\n//                               {/* submit_reservation element rendered only if current user is not the smae as owner of item */}\n//                               {selectedListing?.isBooked === false && usery.user_id !== selectedListing?.user_id && (\n//                                 <div id='submit_reservation' className='reservation_options'>\n//                                   <Button\n//                                     id='submit_reservation'\n//                                     variant='ghost'\n//                                     onClick={() => handleSubmitReservation()}\n//                                     isLoading={isLoading}\n//                                     loadingText='Submitting'\n//                                     spinner={<Spinner size=\"sm\" />}\n//                                   >\n//                                     Reserve\n//                                   </Button>\n//                                 </div>\n//                               )}\n\n//                               {/* item_reserved element is displayed only if the isBooked field for the item is true */}\n//                               {selectedListing?.isBooked === true && (\n//                                 <div id='item_reserved' className='reservation_options'>\n//                                   Item Currently Reserved\n//                                 </div>\n//                               )}\n\n//                               {/* cancel_reservation element is displayed if the current user owns the selectedListing or if the current user is currently rennting the item*/}\n//                               {selectedListing?.isBooked === true && \n//                                 (usery.user_id === selectedListing?.current_renter || usery.user_id === selectedListing?.user_id) && (\n//                                 <div id='cancel_reservation' className='reservation_options' onClick={cancelReservation}>\n//                                   Cancel Current Reservation\n//                                 </div>\n//                               )}\n\n//                               {/* delete_listing element is displayed only if the current user owns the item */}\n//                               {usery.user_id === selectedListing?.user_id && (\n//                                 <div id='delete_listing' className='reservation_options' onClick={deleteListing}>\n//                                   Delete Listing\n//                                 </div>\n//                               )}\n//                             </div>\n\n//                             </div>\n\n//                         </ModalBody>\n\n//                         <ModalFooter>\n//                             <Button colorScheme=\"black\" mr={3} onClick={onEnlargedClose}>\n//                                 Close\n//                             </Button>\n//                         </ModalFooter>\n//                     </ModalContent>\n//                 </Modal>\n\n//     </div>\n//   );\n// }\n\n// export default Home;\n\nimport React, { useEffect, useState } from 'react';\nimport { isLoggedIn, removeUserSession } from './AuthServices';\nimport axios from 'axios';\nimport { DateSelector } from './DateSelector';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Link, useNavigate } from 'react-router-dom';\nimport './home.css';\nimport { ChakraProvider, IconButton, Input, Select, Button, Alert, AlertIcon, AlertTitle, useDisclosure, Box, Spinner, Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, useToast, Popover, PopoverTrigger, PopoverContent, PopoverHeader, PopoverBody, PopoverArrow, PopoverCloseButton } from '@chakra-ui/react';\nimport { Avatar } from '@chakra-ui/react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { getUser } from './AuthServices';\nimport { faCircleInfo, faCircleUser, faRightFromBracket } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const usery = getUser() || {};\n  const [allListings, setAllListings] = useState([]);\n  const [displayedListings, setDisplayedListings] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedListing, setSelectedListing] = useState(null);\n  const {\n    isOpen: isAddOpen,\n    onOpen: onAddOpen,\n    onClose: onAddClose\n  } = useDisclosure();\n  const {\n    isOpen: isEnlargedOpen,\n    onOpen: onEnlargedOpen,\n    onClose: onEnlargedClose\n  } = useDisclosure();\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [selectedFilter, setSelectedFilter] = useState('None');\n  const toast = useToast();\n  const [reservationDetails, setReservationDetails] = useState({\n    start_date: null,\n    end_date: null\n  });\n  const [itemDetails, setItemDetails] = useState({\n    username: '',\n    email: '',\n    image_url: '',\n    location: '',\n    category: '',\n    item_name: '',\n    price_per_day: '',\n    description: '',\n    start_date: null,\n    end_date: null\n  });\n  useEffect(() => {\n    getAllListings();\n  }, []);\n  const navigate = useNavigate();\n  const handleLogout = () => {\n    removeUserSession();\n    navigate('/');\n  };\n  const handleSearch = e => {\n    const query = e.target.value.toLowerCase();\n    setSearchQuery(query);\n    setDisplayedListings(query === '' ? allListings : allListings.filter(listing => listing.item_name && listing.item_name.toLowerCase().includes(query)));\n  };\n  const handleChange = e => {\n    setItemDetails(prev => ({\n      ...prev,\n      [e.target.id]: e.target.value\n    }));\n  };\n  const handleImageChange = e => {\n    setSelectedImage(e.target.files[0]);\n  };\n  const handleSubmit = async e => {/* unchanged */};\n  const handleFilterChange = e => {\n    const v = e.target.value;\n    setSelectedFilter(v);\n    handleFilter(v);\n  };\n  const handleFilter = filter => {/* unchanged */};\n  const cancelReservation = async () => {/* unchanged */};\n  const deleteListing = async () => {/* unchanged */};\n  const enlargeListing = listing => {\n    setSelectedListing(listing);\n    onEnlargedOpen();\n  };\n  async function handleSubmitReservation() {/* unchanged */}\n  async function getAllListings() {/* unchanged */}\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"logo-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://img.icons8.com/metro/52/swap.png\",\n            alt: \"swap\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 962,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"logo-text\",\n            children: \"Zwappr\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 963,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 961,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"tagline\",\n            children: \"For the small things.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 966,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modern-search-bar\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Search listings...\",\n              value: searchQuery,\n              onChange: handleSearch\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 968,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"search-icon\",\n              src: \"https://img.icons8.com/ios-glyphs/30/search--v1.png\",\n              alt: \"search\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 969,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 967,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 965,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"circle-button\",\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faCircleUser\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 973,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 973,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"circle-button\",\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faCircleInfo\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 974,\n              columnNumber: 47\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 974,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 972,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 960,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"category-bar\",\n        children: ['furniture', 'games', 'clothing', 'homedecor', 'party', 'camersandphotography', 'campingandoutdoors', 'cateringequipment'].map(cat => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"category\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: require(`./assets/${cat}.png`),\n            alt: cat\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 980,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: cat.replace(/([a-z])([A-Z])/g, '$1 $2').replace(/\\b\\w/g, l => l.toUpperCase())\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 981,\n            columnNumber: 15\n          }, this)]\n        }, cat, true, {\n          fileName: _jsxFileName,\n          lineNumber: 979,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 977,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 959,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 958,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"1PKg9t/WfN+t9rwqrE0JDCE4X2Q=\", false, function () {\n  return [useDisclosure, useDisclosure, useToast, useNavigate];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useEffect","useState","isLoggedIn","removeUserSession","axios","DateSelector","DatePicker","Link","useNavigate","ChakraProvider","IconButton","Input","Select","Button","Alert","AlertIcon","AlertTitle","useDisclosure","Box","Spinner","Modal","ModalOverlay","ModalContent","ModalHeader","ModalFooter","ModalBody","ModalCloseButton","useToast","Popover","PopoverTrigger","PopoverContent","PopoverHeader","PopoverBody","PopoverArrow","PopoverCloseButton","Avatar","FontAwesomeIcon","getUser","faCircleInfo","faCircleUser","faRightFromBracket","jsxDEV","_jsxDEV","Home","_s","usery","allListings","setAllListings","displayedListings","setDisplayedListings","error","setError","loading","setLoading","isLoading","setIsLoading","message","setMessage","searchQuery","setSearchQuery","selectedListing","setSelectedListing","isOpen","isAddOpen","onOpen","onAddOpen","onClose","onAddClose","isEnlargedOpen","onEnlargedOpen","onEnlargedClose","selectedImage","setSelectedImage","selectedFilter","setSelectedFilter","toast","reservationDetails","setReservationDetails","start_date","end_date","itemDetails","setItemDetails","username","email","image_url","location","category","item_name","price_per_day","description","getAllListings","navigate","handleLogout","handleSearch","e","query","target","value","toLowerCase","filter","listing","includes","handleChange","prev","id","handleImageChange","files","handleSubmit","handleFilterChange","v","handleFilter","cancelReservation","deleteListing","enlargeListing","handleSubmitReservation","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","icon","map","cat","require","replace","l","toUpperCase","_c","$RefreshReg$"],"sources":["/Users/bheesha.k/Desktop/Zwappr-emiko-copy/zwappr/src/Home.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\n// import { isLoggedIn, removeUserSession } from './AuthServices';\n// import axios from 'axios';\n// import {DateSelector} from './DateSelector';\n// import DatePicker from 'react-datepicker';\n// import 'react-datepicker/dist/react-datepicker.css';\n// import { Link, useNavigate } from 'react-router-dom';\n// import './home.css';\n// import { ChakraProvider, IconButton, Input, Select, Button, Alert,AlertIcon, AlertTitle, useDisclosure, Box, Spinner, Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, useToast } from '@chakra-ui/react';\n// import { Avatar, AvatarBadge, AvatarGroup } from '@chakra-ui/react'\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { getUser } from './AuthServices';\n// import { faThumbsDown, faThumbsUp, faCircleInfo, faPaperPlane, faCircleUser, faRightFromBracket } from '@fortawesome/free-solid-svg-icons';\n\n// import {\n//   Popover,\n//   PopoverTrigger,\n//   PopoverContent,\n//   PopoverHeader,\n//   PopoverBody,\n//   PopoverFooter,\n//   PopoverArrow,\n//   PopoverCloseButton,\n//   PopoverAnchor,\n// } from '@chakra-ui/react'\n\n\n\n\n// function Home() {\n//   const usery = getUser() || {};\n//   console.log(usery)\n//     const [allListings, setAllListings] = useState([]);\n//     const [displayedListings, setDisplayedListings] = useState([]);\n//     const [error, setError] = useState(null);\n//     const [loading, setLoading] = useState(true);\n//     const [isLoading, setIsLoading] = useState(false);\n//     const [message, setMessage] = useState('');\n//     const [searchQuery, setSearchQuery] = useState('');\n//     const [selectedListing, setSelectedListing] = useState(null);\n//     const { isOpen: isAddOpen, onOpen: onAddOpen, onClose: onAddClose } = useDisclosure();\n//     const { isOpen: isEnlargedOpen, onOpen: onEnlargedOpen, onClose: onEnlargedClose } = useDisclosure();\n//     const [selectedImage, setSelectedImage] = useState(null);\n//     const [selectedFilter, setSelectedFilter] = useState('None');\n//     const toast = useToast();\n//     const [reservationDetails, setReservationDetails] = useState({\n//         start_date: null,\n//         end_date: null,\n//     });\n//     const [itemDetails, setItemDetails] = useState({\n//       username: '',\n//       email: '',\n//       image_url: '',\n//       location: '',\n//       category: '',\n//       item_name: '',\n//       price_per_day: '',\n//       description: '',\n//       start_date: null,\n//       end_date: null\n//   });\n\n  \n//   //UseEffects////////////////////////////////////////////////////\n//     useEffect(() => {\n//         getAllListings(); // Fetch listings on mount\n//     }, []);\n\n  \n\n//   const navigate = useNavigate();\n//   const handleLogout = () => {\n//     removeUserSession(); // Remove user session\n//     navigate('/'); // Redirect to the home page or login page\n//   };\n\n//   const handleSearch = (e) => {\n//     const query = e.target.value.toLowerCase();\n//     setSearchQuery(query);\n//     if (query === '') {\n//         setDisplayedListings(allListings);\n//     } else {\n//         const filteredListings = allListings.filter(listing =>\n//             listing.item_name && listing.item_name.toLowerCase().includes(query)\n//         );\n//         setDisplayedListings(filteredListings);\n//     }\n//   };\n\n//   const handleChange = (e) => {\n//     const { id, value } = e.target;\n//     setItemDetails(prevDetails => ({\n//         ...prevDetails,\n//         [id]: value\n//     }));\n//   };\n\n//   const handleImageChange = (event) => {\n//     const file = event.target.files[0];\n//     setSelectedImage(file); // Store the selected file in state\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault(); // Prevent the default form submission behavior\n\n//     // Validate the form fields\n//     if (typeof itemDetails.item_name === 'string' && !itemDetails.item_name.trim()) {\n//         setError('Please enter a name.');\n//         return;\n//     }\n\n//     if (!itemDetails.category || itemDetails.category === 'None') {\n//         setError('Please select a category.');\n//         return;\n//     }\n\n//     if (!itemDetails.location) {\n//       setError('Please select a location.');\n//       return;\n//   }\n\n//     if (!itemDetails.start_date) {\n//         setError('Please select a start date.');\n//         return;\n//     }\n\n//     if (!itemDetails.end_date) {\n//         setError('Please select an end date.');\n//         return;\n//     }\n\n//     if (new Date(itemDetails.start_date) > new Date(itemDetails.end_date)) {\n//         setError('Start date cannot be later than the end date.');\n//         return;\n//     }\n\n//     if (!selectedImage) {\n//         setError('Please select an image.');\n//         return;\n//     }\n\n//     setIsLoading(true);\n//     setError('');\n\n//     try {\n//         // Creating a FormData object to send the image\n//         const formData = new FormData();\n//         formData.append('media', selectedImage);\n\n//         // Send the image to the backend\n//         const response = await axios.post('http://localhost:5001/uploadToCloudinary', formData, {\n//             headers: {\n//                 'Content-Type': 'multipart/form-data',\n//             },\n//         });\n\n//         console.log('Image uploaded successfully:', response.data.url);\n\n//         // Add the uploaded image URL to itemDetails\n//         const imageUrl = response.data.url;\n//         const updatedItemDetails = { ...itemDetails, image_url: imageUrl, username: usery.username, user_id: usery.user_id, email: usery.email };\n\n//         // Send `updatedItemDetails` to the backend to save the listing\n//         console.log('Final item details:', updatedItemDetails);\n\n//         const response2 = await fetch('http://localhost:5001/addListing', {\n//             method: 'POST',\n//             headers: {\n//                 'Content-Type': 'application/json',\n//             },\n//             body: JSON.stringify(updatedItemDetails),\n//         });\n\n//         if (response2.ok) {\n//             console.log('Item details added to database successfully.');\n//             setMessage('Item added successfully!');\n//             onAddClose();//modal is closed here and success toast is displayed\n//             toast({\n//                 title: 'Success',\n//                 description: 'Your Listing has been added',\n//                 status: 'success',\n//                 duration: 3000,\n//                 isClosable: true,\n//             });\n//             getAllListings();\n//         } else {\n//             const errorData = await response2.json();\n//             console.error('Error adding item details:', errorData.message);\n//             setError('Failed to add item. Image size might be too large. Please try again.');\n//         }\n\n//         setIsLoading(false);\n//     } catch (error) {\n//         console.error('Error uploading item:', error);\n//         setError('Failed to upload item. Please try again.');\n//         setIsLoading(false);\n//     }\n\n//     setItemDetails({\n//         username: '',\n//         email: '',\n//         image_url: '',\n//         location: '',\n//         category: '',\n//         item_name: '',\n//         price_per_day: '',\n//         description: '',\n//         start_date: null,\n//         end_date: null\n//     });\n// };\n\n// const handleFilterChange = (e) => {\n//   const value = e.target.value;\n//   setSelectedFilter(value);\n//   handleFilter(value);\n// };\n\n// const handleFilter = (filter) => {\n//   let filteredListings = [...allListings];\n\n//   if (filter === 'Reserved Items') {\n//     // Filter listings where the current user's user_id matches the current_renter field\n//     filteredListings = allListings.filter(\n//       (listing) => listing.current_renter && listing.current_renter === usery.user_id\n//     );\n//     console.log('Reserved items:', filteredListings);\n//   } else if (filter !== 'None') {\n//     // Filter listings by category\n//     filteredListings = allListings.filter((listing) => listing.category === filter);\n//   }\n\n//   // Apply search query filter if applicable\n//   if (searchQuery !== '') {\n//     filteredListings = filteredListings.filter((listing) =>\n//       listing.item_name.toLowerCase().includes(searchQuery)\n//     );\n//   }\n\n//   setDisplayedListings(filteredListings);\n// };\n\n// const cancelReservation = async () => {\n//   setIsLoading(true);\n//   setError('');\n\n//   try {\n//     const reservationData = {\n//       item_id: selectedListing?.item_id,\n//       renter_id: usery.user_id,\n//     };\n\n//     const response = await fetch('http://localhost:5001/cancelReservation', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(reservationData),\n//     });\n\n//     if (response.ok) {\n//       console.log('Reservation cancelled successfully.');\n//       setMessage('Reservation cancelled successfully!');\n//       toast({\n//         title: 'Success',\n//         description: 'Your reservation has been cancelled.',\n//         status: 'success',\n//         duration: 3000,\n//         isClosable: true,\n//       });\n//       onEnlargedClose(); // Close the enlarged listing modal\n//       setSelectedListing(null); // Reset selected listing\n//       getAllListings(); // Refresh listings\n//     } else {\n//       const errorData = await response.json();\n//       console.error('Error cancelling reservation:', errorData.message);\n//       setError('Failed to cancel reservation. Please try again.');\n//       toast({\n//         title: 'Error',\n//         description: 'Failed to cancel reservation. Please try again.',\n//         status: 'error',\n//         duration: 3000,\n//         isClosable: true,\n//       });\n//     }\n//   } catch (error) {\n//     console.error('Error cancelling reservation:', error);\n//     setError('Failed to cancel reservation. Please try again.');\n//     toast({\n//       title: 'Error',\n//       description: 'Failed to cancel reservation. Please try again.',\n//       status: 'error',\n//       duration: 3000,\n//       isClosable: true,\n//     });\n//   } finally {\n//     setIsLoading(false);\n//   }\n// }\n\n// const deleteListing = async () => {\n//   setIsLoading(true);\n//   setError('');\n\n//   try {\n//     const listingData = {\n//       item_id: selectedListing?.item_id,\n//       user_id: usery.user_id,\n//     };\n\n//     const response = await fetch('http://localhost:5001/removeListing', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(listingData),\n//     });\n\n//     if (response.ok) {\n//       console.log('Listing deleted successfully.');\n//       setMessage('Listing deleted successfully!');\n//       toast({\n//         title: 'Success',\n//         description: 'Your listing has been deleted.',\n//         status: 'success',\n//         duration: 3000,\n//         isClosable: true,\n//       });\n//       onEnlargedClose(); // Close the enlarged listing modal\n//       setSelectedListing(null); // Reset selected listing\n//       getAllListings(); // Refresh listings\n//     } else {\n//       const errorData = await response.json();\n//       console.error('Error deleting listing:', errorData.message);\n//       setError('Failed to delete listing. Please try again.');\n//       toast({\n//         title: 'Error',\n//         description: 'Failed to delete listing. Please try again.',\n//         status: 'error',\n//         duration: 3000,\n//         isClosable: true,\n//       });\n//     }\n//   } catch (error) {\n//     console.error('Error deleting listing:', error);\n//     setError('Failed to delete listing. Please try again.');\n//     toast({\n//       title: 'Error',\n//       description: 'Failed to delete listing. Please try again.',\n//       status: 'error',\n//       duration: 3000,\n//       isClosable: true,\n//     });\n//   } finally {\n//     setIsLoading(false);\n//   }\n// }\n\n// const enlargeListing = (listing) => {\n//   setSelectedListing(listing);\n//   onEnlargedOpen();\n// };\n\n// async function handleSubmitReservation() {\n//   console.log('Submitting reservation:');\n//   setIsLoading(true);\n//   setError('');\n\n//   // Validate the reservation dates\n//   if (!reservationDetails.start_date || !reservationDetails.end_date) {\n//     setError('Please select both start and end dates.');\n//     toast({\n//       title: 'Error',\n//       description: 'Please select both start and end dates.',\n//       status: 'error',\n//       duration: 3000,\n//       isClosable: true,\n//     });\n//     setIsLoading(false);\n//     return;\n//   }\n\n//   const selectedStartDate = new Date(reservationDetails.start_date);\n//   const selectedEndDate = new Date(reservationDetails.end_date);\n//   const listingStartDate = new Date(selectedListing?.start_date);\n//   const listingEndDate = new Date(selectedListing?.end_date);\n\n//   if (selectedStartDate < listingStartDate) {\n//     setError('Reservation start date cannot be before the listing start date.');\n//     toast({\n//       title: 'Error',\n//       description: 'Reservation start date cannot be before the listing start date.',\n//       status: 'error',\n//       duration: 3000,\n//       isClosable: true,\n//     });\n//     setIsLoading(false);\n//     return;\n//   }\n\n//   if (selectedEndDate > listingEndDate) {\n//     setError('Reservation end date cannot be after the listing end date.');\n//     toast({\n//       title: 'Error',\n//       description: 'Reservation end date cannot be after the listing end date.',\n//       status: 'error',\n//       duration: 3000,\n//       isClosable: true,\n//     });\n//     setIsLoading(false);\n//     return;\n//   }\n\n//   try {\n//     // Send reservation details to the backend\n//     const reservationData = {\n//       itemowner_id: selectedListing?.user_id,\n//       item_id: selectedListing?.item_id,\n//       renter_id: usery.user_id,//renter is the cuurent user\n//       reservation_start_date: reservationDetails.start_date,\n//       reservation_end_date: reservationDetails.end_date,\n//     };\n\n//     const response = await fetch('http://localhost:5001/addReservation', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(reservationData),\n//     });\n\n//     if (response.ok) {\n//       console.log('Reservation added successfully.');\n//       setMessage('Reservation added successfully!');\n//       toast({\n//         title: 'Success',\n//         description: 'Your reservation has been added.',\n//         status: 'success',\n//         duration: 3000,\n//         isClosable: true,\n//       });\n//       onEnlargedClose(); // Close the enlarged listing modal\n//       setReservationDetails({ start_date: null, end_date: null }); // Reset reservation details\n//       setSelectedListing(null); // Reset selected listing\n//       setDisplayedListings(allListings); // Reset displayed listings\n//       getAllListings(); // Refresh listings\n//     } else {\n//       const errorData = await response.json();\n//       console.error('Error adding reservation:', errorData.message);\n//       setError('Failed to add reservation. Please try again.');\n//       toast({\n//         title: 'Error',\n//         description: 'Failed to add reservation. Please try again.',\n//         status: 'error',\n//         duration: 3000,\n//         isClosable: true,\n//       });\n//     }\n//   } catch (error) {\n//     console.error('Error submitting reservation:', error);\n//     setError('Failed to submit reservation. Please try again.');\n//     toast({\n//       title: 'Error',\n//       description: 'Failed to submit reservation. Please try again.',\n//       status: 'error',\n//       duration: 3000,\n//       isClosable: true,\n//     });\n//   } finally {\n//     setIsLoading(false);\n//   }\n// }\n\n\n\n//   async function getAllListings (){\n//     try{\n//         const response = await fetch(`http://localhost:5001/getItems`, {\n//             method: 'GET',\n//             headers: { 'Content-Type': 'application/json',\n//                 \"Access-Control-Allow-Origin\": \"*\",\n//                 \"Access-Control-Allow-Headers\": \"Content-Type\",\n//                 \"Access-Control-Allow-Methods\": \"OPTIONS,POST,GET\"\n//             },\n//         });\n\n//         const data = await response.json();\n//         console.log('Response is HERE:', data);\n\n//         if (response.ok) {\n//             console.log('All Listings retrieved:', data);\n            \n//             // Update the state with the retrieved movie cards\n//             setAllListings(data.map(listing => ({ ...listing })));\n//             console.log('All Listings displayed here:', allListings);\n//             setDisplayedListings(data); \n\n//         } else{\n//             console.error('Error retrieving movie card:', data.message);\n//             setError('Error retrieving movie cards :-(');\n//         }\n    \n//     } catch (error) {\n//             console.log('An error getting cards occurred. Please try again.');\n//         }\n\n// }\n\n//  // return (\n//     // <div className=\"App\">\n//     //   <div className='topbar'>\n//     //     <div className='titleandlogo'><img width=\"52\" height=\"52\" src=\"https://img.icons8.com/metro/52/swap.png\" alt=\"swap\"/><p id='title'>Zwappr</p></div>\n//        // {\n//           /* <div className=\"top-container\">\n//   <div className=\"tagline\">For the small things.</div>\n//   <div className=\"modern-search-bar\">\n//     <input\n//       type=\"text\"\n//       placeholder=\"Search listings...\"\n//       value={searchQuery}\n//       onChange={handleSearch}\n//     />\n//     <img src=\"https://img.icons8.com/ios-filled/20/000000/search--v1.png\" alt=\"Search\" className=\"search-icon\" />\n//   </div>\n// </div>\n\n// <div className=\"category-bar\">\n//   {[\n//     { name: 'Furniture', icon: 'furniture.png' },\n//     { name: 'Games', icon: 'games.png' },\n//     { name: 'Clothing', icon: 'clothing.png' },\n//     { name: 'Home Decor', icon: 'homedecor.png' },\n//     { name: 'Party Supplies', icon: 'party.png' }, \n//     { name: 'Cameras & Photography', icon: 'camersandphotography.png' },\n//     { name: 'Camping & Outdoors', icon: 'campingandoutdoors.png' },\n//     { name: 'Catering Equipment', icon: 'cateringequipment.png' },\n//   ].map(category => (\n//     <div className=\"category\" key={category.name}>\n//       <img src={require(`./assets/${category.icon}`)} alt={category.name} />\n//       <span>{category.name}</span>\n//     </div>\n//   ))}\n// </div> */}\n\n// <div className=\"top-container\">\n//   <div className=\"header-row\">\n//     <div className=\"logo-section\">\n//       <img src=\"https://img.icons8.com/metro/52/swap.png\" alt=\"swap\" />\n//       <span className=\"logo-text\">Zwappr</span>\n//     </div>\n\n//     <div className=\"search-section\">\n//       <p className=\"tagline\">For the small things.</p>\n//       <div className=\"modern-search-bar\">\n//         <input\n//           type=\"text\"\n//           placeholder=\"Search listings...\"\n//           value={searchQuery}\n//           onChange={handleSearch}\n//         />\n//         <img className=\"search-icon\" src=\"https://img.icons8.com/ios-glyphs/30/search--v1.png\" alt=\"search\" />\n//       </div>\n//     </div>\n\n//     <div className=\"icon-buttons\">\n//       <button className=\"circle-button\"><FontAwesomeIcon icon={faCircleUser} /></button>\n//       <button className=\"circle-button\"><FontAwesomeIcon icon={faCircleInfo} /></button>\n//     </div>\n//   </div>\n\n//   <div className=\"category-bar\">\n//     <div className=\"category\"><img src={require('./assets/furniture.png')} alt=\"Furniture\" /><span>Furniture</span></div>\n//     <div className=\"category\"><img src={require('./assets/games.png')} alt=\"Games\" /><span>Games</span></div>\n//     <div className=\"category\"><img src={require('./assets/clothing.png')} alt=\"Clothing\" /><span>Clothing</span></div>\n//     <div className=\"category\"><img src={require('./assets/homedecor.png')} alt=\"Home Decor\" /><span>Home Decor</span></div>\n//     <div className=\"category\"><img src={require('./assets/party.png')} alt=\"Party Supplies\" /><span>Party Supplies</span></div>\n//     <div className=\"category\"><img src={require('./assets/camersandphotography.png')} alt=\"Cameras\" /><span>Cameras & Photography</span></div>\n//     <div className=\"category\"><img src={require('./assets/campingandoutdoors.png')} alt=\"Camping\" /><span>Camping & Outdoors</span></div>\n//     <div className=\"category\"><img src={require('./assets/cateringequipment.png')} alt=\"Catering\" /><span>Catering Equipment</span></div>\n//   </div>\n// </div>\n\n\n\n//         <div className='profileicon'>\n//         <Popover >\n//             <PopoverTrigger>\n//                 <Button  _hover={{ bg: '#3eaff6' }} marginTop='5px'backgroundColor=\" rgb(80, 78, 78);\"><FontAwesomeIcon size=\"2xl\" style={{color: \"white\",}} icon={faCircleUser} /></Button>\n//             </PopoverTrigger>\n//             <PopoverContent width='50vw'backgroundColor=\" rgb(80, 78, 78);\">\n//                 <PopoverArrow />\n//                 <PopoverCloseButton />\n//                 <PopoverHeader>\n//                     <Avatar\n//                         size='lg'\n//                         name={usery?.username || 'Guest'} // Use 'Guest' if usery.username is undefined\n//                         src='https://bit.ly/broken-link'\n//                     />\n//                     <p id='pruh'><b>Hello, {usery?.username || 'Guest'}</b></p>\n//                     <p>Welcome!</p>\n//                 </PopoverHeader>\n//                 <PopoverBody>{isLoggedIn() && (<button onClick={handleLogout} className=\"logout_butt\">Logout <FontAwesomeIcon size='sm' icon={faRightFromBracket} style={{color: \"white\",}} /></button>)}</PopoverBody>\n//             </PopoverContent>\n//         </Popover>\n//         <Popover >\n//             <PopoverTrigger>\n//                 <Button _hover={{ bg: '#3eaff6' }} className=\"usecontrol\"marginTop='5px'backgroundColor=\" rgb(80, 78, 78);\"><FontAwesomeIcon icon={faCircleInfo} size=\"2xl\" style={{color: \"white\",}} /></Button>\n//             </PopoverTrigger>\n//             <PopoverContent width='50vw'backgroundColor=\" rgb(80, 78, 78);\">\n//                 <PopoverArrow />\n//                 <PopoverCloseButton />\n//                 <PopoverHeader>Info</PopoverHeader>\n//                 <PopoverBody>\n//                     <ul>\n//                         <li>Press the Add Listing button to post a listing.</li>\n//                         &nbsp;\n//                         <li>Click on each listing to see more.</li>\n//                     </ul>\n//                 </PopoverBody>\n//             </PopoverContent>\n//         </Popover>\n//         </div>\n//       </div>\n\n\n//       <div className='buttons'>\n//       <Button id='newlisting' color='black' fontSize='14px' colorScheme='white;' onClick={onAddOpen}>+ Add New Listing</Button>\n//         <div id='filter'>Filter\n//         <Select iconSize='14px' id='filter' placeholder='' onChange={handleFilterChange} bg=\"white\" color=\"black\" border=\"none\">\n//             <option value='None'>None</option>\n//             <option value='Reserved Items'>Reserved items</option>\n//             <option value='Party Supplies'>Party Supplies</option>\n//             <option value='Camera Equipment'>Camera Equipment</option>\n//             <option value='Furniture'>Furniture</option>\n//             <option value='Games'>Games</option>\n//             <option value='Clothing'>Clothing</option>\n//             <option value='Home Decor'>Home Decor</option>\n//             <option value='Camping & Outdoors'>Camping & Outdoors</option>\n//             <option value='Catering Equipment'>Catering Equipment</option>\n//             <option value='Books'>Books</option>\n//             <option value='Other'>Other</option>\n            \n//         </Select>\n\n//         </div>\n//       </div>\n\n\n//       <div className ='listings_box'>\n//         <div className='sub_listings_box'>\n//           {displayedListings.map((listing) => (\n//             <div key={listing.item_id} onClick={() => enlargeListing(listing)}className='listing'>\n            \n//               <div id='listing_img'>\n//                 <img src={listing.image_url} alt={listing.title} className='listing_image' id='listing_img'/>\n//               </div>\n//               <div id='listing_info'>\n//               <div id='i_name_and_price'><h3>{listing.item_name}</h3> <h3>{listing.price_per_day}</h3> </div>\n//               <p id='listing_location'>{listing.location}</p>\n//               <Avatar colorPalette='black' size='2xs'name={listing.username} src='https://bit.ly/broken-link' />&nbsp;<b>{listing.username}</b>\n\n\n//               </div>\n              \n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n\n\n\n//       {/* Add Listing Modal */}\n//       <Modal id='listing_entry' isOpen={isAddOpen} onClose={onAddClose}>\n//                     <ModalOverlay />\n//                     <ModalContent>\n//                         <ModalHeader>Add an Item for Rent!</ModalHeader>\n//                         <ModalCloseButton />\n//                         <ModalBody>\n                            \n//                                 <Box id='i_name'>\n//                                     Item Name:<Input id='item_name' focusBorderColor='black' placeholder='e.g. Camera' value={itemDetails.item_name} onChange={handleChange} />\n//                                 </Box>\n//                                 <Box id='i_price'>\n//                                     Price Per Day ($):<Input id='price_per_day' focusBorderColor='black' placeholder='e.g. 50' value={itemDetails.price_per_day} onChange={handleChange} />\n//                                 </Box>\n//                                 <Box id='i_category'>\n//                                     Category: \n//                                     <Select id='category' focusBorderColor='black' iconSize='20px' className='item_filter' placeholder='None' value={itemDetails.category} onChange={handleChange}>\n//                                         <option value='Party Supplies'>Party Supplies</option>\n//                                         <option value='Camera Equipment'>Camera Equipment</option>\n//                                         <option value='Furniture'>Furniture</option>\n//                                         <option value='Games'>Games</option>\n//                                         <option value='Clothing'>Clothing</option>\n//                                         <option value='Home Decor'>Home Decor</option>\n//                                         <option value='Camping & Outdoors'>Camping & Outdoors</option>\n//                                         <option value='Catering Equipment'>Catering Equipment</option>\n//                                         <option value='Books'>Books</option>\n//                                         <option value='Other'>Other</option>\n//                                     </Select>\n//                                 </Box>\n\n//                                 <Box id='i_location'>\n//                                     Location: \n//                                     <Select id='location' focusBorderColor='black' iconSize='20px' className='item_location' placeholder='None' value={itemDetails.location} onChange={handleChange}>\n//                                       <option value=\"\">Select Dorm / Building</option>\n//                                       <option value=\"Cascade Hall\">Cascade Hall</option>\n//                                       <option value=\"Aurora Hall\">Aurora Hall</option>\n//                                       <option value=\"Olympus Hall\">Olympus Hall</option>\n//                                       <option value=\"Yamnuska Hall\">Yamnuska Hall</option>\n//                                       <option value=\"Global Village\">Global Village</option>\n//                                       <option value=\"Kananaskis Hall\">Kananaskis Hall</option>\n//                                       <option value=\"Rundle Hall\">Rundle Hall</option>\n//                                       <option value=\"Crowsnest Hall\">Crowsnest Hall</option>\n//                                       <option value=\"International House\">International House</option>\n//                                       <option value=\"Varsity Courts\">Varsity Courts</option>\n//                                     </Select>\n//                                 </Box>\n                                \n//                                 <Box id=\"i_img\">\n//                                     Image:\n//                                     <Input\n//                                         id=\"item_image\"\n//                                         focusBorderColor=\"black\"\n//                                         type=\"file\"\n//                                         onChange={handleImageChange} // Capture the selected image into a useState\n//                                     />\n//                                 </Box>\n//                                 <Box id='i_description'>\n//                                     About:<Input id='description' focusBorderColor='black' placeholder='e.g. Say something about your listing...' value={itemDetails.description} onChange={handleChange} />\n//                                 </Box>\n//                                 <Box id='i_start_date'>\n//                                     Start Date:\n//                                     <DatePicker\n//                                         selected={itemDetails.start_date}\n//                                         onChange={(date) => setItemDetails(prevDetails => ({\n//                                             ...prevDetails,\n//                                             start_date: date.toISOString() // Save as ISO string\n//                                         }))}\n//                                         dateFormat=\"yyyy-MM-dd\"\n//                                         placeholderText=\"Select a start date\"\n//                                         focusBorderColor='black'\n//                                     />\n//                                 </Box>\n//                                 <Box id='i_end_date'>\n//                                     End Date:\n//                                     <DatePicker\n//                                         selected={itemDetails.end_date}\n//                                         onChange={(date) => setItemDetails(prevDetails => ({\n//                                             ...prevDetails,\n//                                             end_date: date.toISOString() // Save as ISO string\n//                                         }))}\n//                                         dateFormat=\"yyyy-MM-dd\"\n//                                         placeholderText=\"Select an end date\"\n//                                         focusBorderColor='black'\n//                                     />\n//                                 </Box>\n\n                        \n//                             {error && (\n//                                 <Alert status='error' mt={4}>\n//                                     <AlertIcon />\n//                                     <AlertTitle>{error}</AlertTitle>\n//                                 </Alert>\n//                             )}\n//                         </ModalBody>\n//                         <ModalFooter>\n//                             <Button colorScheme='blue' mr={3} onClick={onAddClose}>\n//                                 Close\n//                             </Button>\n//                             <Button\n//                                 id='submit_details'\n//                                 variant='ghost'\n//                                 onClick={handleSubmit}\n//                                 isLoading={isLoading}\n//                                 loadingText='Submitting'\n//                                 spinner={<Spinner size=\"sm\" />}\n//                             >\n//                                 Submit\n//                             </Button>\n//                         </ModalFooter>\n//                     </ModalContent>\n//                 </Modal>\n\n\n//       {/* Enlarged Listing Modal */}\n\n//       <Modal className='enlargedCard' isOpen={isEnlargedOpen} onClose={onEnlargedClose} size='lg'>\n//                     <ModalOverlay />\n//                     <ModalContent bg=\"white\" color=\"black\" overflowY='scroll' maxWidth='100%' maxHeight='80%'>\n//                         <ModalHeader display=\"flex\" flexDirection=\"column\" alignItems='center' textAlign=\"center\"><div className='titleandlogo'><img width=\"52\" height=\"52\" src=\"https://img.icons8.com/metro/52/swap.png\" alt=\"swap\"/><p id='title'>Zwappr</p></div></ModalHeader>\n//                         <ModalCloseButton />\n//                         <ModalBody display=\"flex\" flexDirection=\"row\" alignItems=\"center\" marginLeft=\"5%\" marginRight=\"5%\" height=\"fit-content\" overflow-y=\"scroll\" justifyContent=\"space-evenly\">\n//                             <div id='left_side'>\n//                               <p id='listing_name'>{selectedListing?.item_name}</p>\n//                               <img src={selectedListing?.image_url} alt={selectedListing?.item_name} className='listing_image' id='enlarged_img'/>\n//                               <Avatar colorPalette='black' size='md'name={selectedListing?.username} src='https://bit.ly/broken-link' />&nbsp;<h2><b>{selectedListing?.username}</b></h2>\n//                               <p id='listing_description'>{selectedListing?.description}</p>\n//                               <p id='listing_email'><b>Email: {selectedListing?.email}</b></p>\n//                             </div>\n//                             <div id='right_side'>\n//                             <div id='reservation_details'>\n//                               <h2><b>${selectedListing?.price_per_day}</b>/day</h2>\n//                               <p id='listing_location'><b>Location:</b> {selectedListing?.location}</p>\n//                               <p id='listing_dates'>\n//                                 <b>Available From:</b> {new Date(selectedListing?.start_date).toLocaleDateString('en-GB')} \n//                                 <b>To:</b> {new Date(selectedListing?.end_date).toLocaleDateString('en-GB')}\n//                               </p>\n//                               <div>\n//                                 From:\n//                                 <DatePicker\n//                                   selected={reservationDetails.start_date}\n//                                   onChange={(date) => setReservationDetails(prevDetails => ({\n//                                     ...prevDetails,\n//                                     start_date: date.toISOString() // Save as ISO string\n//                                   }))}\n//                                   dateFormat=\"yyyy-MM-dd\"\n//                                   placeholderText=\"Select a start date\"\n//                                   focusBorderColor='black'\n//                                 />\n//                               </div>\n//                               <div>\n//                                 To:\n//                                 <DatePicker\n//                                   selected={reservationDetails.end_date}\n//                                   onChange={(date) => setReservationDetails(prevDetails => ({\n//                                     ...prevDetails,\n//                                     end_date: date.toISOString() // Save as ISO string\n//                                   }))}\n//                                   dateFormat=\"yyyy-MM-dd\"\n//                                   placeholderText=\"Select an end date\"\n//                                   focusBorderColor='black'\n//                                 />\n//                               </div>\n\n//                               {/* submit_reservation element rendered only if current user is not the smae as owner of item */}\n//                               {selectedListing?.isBooked === false && usery.user_id !== selectedListing?.user_id && (\n//                                 <div id='submit_reservation' className='reservation_options'>\n//                                   <Button\n//                                     id='submit_reservation'\n//                                     variant='ghost'\n//                                     onClick={() => handleSubmitReservation()}\n//                                     isLoading={isLoading}\n//                                     loadingText='Submitting'\n//                                     spinner={<Spinner size=\"sm\" />}\n//                                   >\n//                                     Reserve\n//                                   </Button>\n//                                 </div>\n//                               )}\n\n//                               {/* item_reserved element is displayed only if the isBooked field for the item is true */}\n//                               {selectedListing?.isBooked === true && (\n//                                 <div id='item_reserved' className='reservation_options'>\n//                                   Item Currently Reserved\n//                                 </div>\n//                               )}\n\n//                               {/* cancel_reservation element is displayed if the current user owns the selectedListing or if the current user is currently rennting the item*/}\n//                               {selectedListing?.isBooked === true && \n//                                 (usery.user_id === selectedListing?.current_renter || usery.user_id === selectedListing?.user_id) && (\n//                                 <div id='cancel_reservation' className='reservation_options' onClick={cancelReservation}>\n//                                   Cancel Current Reservation\n//                                 </div>\n//                               )}\n\n//                               {/* delete_listing element is displayed only if the current user owns the item */}\n//                               {usery.user_id === selectedListing?.user_id && (\n//                                 <div id='delete_listing' className='reservation_options' onClick={deleteListing}>\n//                                   Delete Listing\n//                                 </div>\n//                               )}\n//                             </div>\n\n//                             </div>\n                        \n\n//                         </ModalBody>\n                            \n//                         <ModalFooter>\n//                             <Button colorScheme=\"black\" mr={3} onClick={onEnlargedClose}>\n//                                 Close\n//                             </Button>\n//                         </ModalFooter>\n//                     </ModalContent>\n//                 </Modal>\n\n\n//     </div>\n//   );\n// }\n\n// export default Home;\n\n\nimport React, { useEffect, useState } from 'react';\nimport { isLoggedIn, removeUserSession } from './AuthServices';\nimport axios from 'axios';\nimport { DateSelector } from './DateSelector';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { Link, useNavigate } from 'react-router-dom';\nimport './home.css';\nimport {\n  ChakraProvider, IconButton, Input, Select, Button, Alert, AlertIcon, AlertTitle, useDisclosure, Box, Spinner, Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, useToast,\n  Popover, PopoverTrigger, PopoverContent, PopoverHeader, PopoverBody, PopoverArrow, PopoverCloseButton\n} from '@chakra-ui/react';\nimport { Avatar } from '@chakra-ui/react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { getUser } from './AuthServices';\nimport { faCircleInfo, faCircleUser, faRightFromBracket } from '@fortawesome/free-solid-svg-icons';\n\nfunction Home() {\n  const usery = getUser() || {};\n  const [allListings, setAllListings] = useState([]);\n  const [displayedListings, setDisplayedListings] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedListing, setSelectedListing] = useState(null);\n  const { isOpen: isAddOpen, onOpen: onAddOpen, onClose: onAddClose } = useDisclosure();\n  const { isOpen: isEnlargedOpen, onOpen: onEnlargedOpen, onClose: onEnlargedClose } = useDisclosure();\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [selectedFilter, setSelectedFilter] = useState('None');\n  const toast = useToast();\n  const [reservationDetails, setReservationDetails] = useState({ start_date: null, end_date: null });\n  const [itemDetails, setItemDetails] = useState({\n    username: '', email: '', image_url: '', location: '', category: '',\n    item_name: '', price_per_day: '', description: '', start_date: null, end_date: null\n  });\n\n  useEffect(() => {\n    getAllListings();\n  }, []);\n\n  const navigate = useNavigate();\n  const handleLogout = () => { removeUserSession(); navigate('/'); };\n  const handleSearch = (e) => {\n    const query = e.target.value.toLowerCase();\n    setSearchQuery(query);\n    setDisplayedListings(query === '' ? allListings : allListings.filter(listing => listing.item_name && listing.item_name.toLowerCase().includes(query)));\n  };\n\n  const handleChange = (e) => { setItemDetails(prev => ({ ...prev, [e.target.id]: e.target.value })); };\n  const handleImageChange = (e) => { setSelectedImage(e.target.files[0]); };\n  const handleSubmit = async (e) => { /* unchanged */ };\n  const handleFilterChange = (e) => { const v = e.target.value; setSelectedFilter(v); handleFilter(v); };\n  const handleFilter = (filter) => { /* unchanged */ };\n  const cancelReservation = async () => { /* unchanged */ };\n  const deleteListing = async () => { /* unchanged */ };\n  const enlargeListing = (listing) => { setSelectedListing(listing); onEnlargedOpen(); };\n  async function handleSubmitReservation() { /* unchanged */ }\n  async function getAllListings() { /* unchanged */ }\n\n  return (\n    <div className=\"App\">\n      <div className=\"top-container\">\n        <div className=\"header-row\">\n          <div className=\"logo-section\">\n            <img src=\"https://img.icons8.com/metro/52/swap.png\" alt=\"swap\" />\n            <span className=\"logo-text\">Zwappr</span>\n          </div>\n          <div className=\"search-section\">\n            <p className=\"tagline\">For the small things.</p>\n            <div className=\"modern-search-bar\">\n              <input type=\"text\" placeholder=\"Search listings...\" value={searchQuery} onChange={handleSearch} />\n              <img className=\"search-icon\" src=\"https://img.icons8.com/ios-glyphs/30/search--v1.png\" alt=\"search\" />\n            </div>\n          </div>\n          <div className=\"icon-buttons\">\n            <button className=\"circle-button\"><FontAwesomeIcon icon={faCircleUser} /></button>\n            <button className=\"circle-button\"><FontAwesomeIcon icon={faCircleInfo} /></button>\n          </div>\n        </div>\n        <div className=\"category-bar\">\n          {['furniture', 'games', 'clothing', 'homedecor', 'party', 'camersandphotography', 'campingandoutdoors', 'cateringequipment'].map(cat => (\n            <div className=\"category\" key={cat}>\n              <img src={require(`./assets/${cat}.png`)} alt={cat} />\n              <span>{cat.replace(/([a-z])([A-Z])/g, '$1 $2').replace(/\\b\\w/g, l => l.toUpperCase())}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* rest of the unchanged JSX like listing grid, modals etc. */}\n    </div>\n  );\n}\n\nexport default Home;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,UAAU,EAAEC,iBAAiB,QAAQ,gBAAgB;AAC9D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,OAAOC,UAAU,MAAM,kBAAkB;AACzC,OAAO,4CAA4C;AACnD,SAASC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;AACpD,OAAO,YAAY;AACnB,SACEC,cAAc,EAAEC,UAAU,EAAEC,KAAK,EAAEC,MAAM,EAAEC,MAAM,EAAEC,KAAK,EAAEC,SAAS,EAAEC,UAAU,EAAEC,aAAa,EAAEC,GAAG,EAAEC,OAAO,EAAEC,KAAK,EAAEC,YAAY,EAAEC,YAAY,EAAEC,WAAW,EAAEC,WAAW,EAAEC,SAAS,EAAEC,gBAAgB,EAAEC,QAAQ,EAChNC,OAAO,EAAEC,cAAc,EAAEC,cAAc,EAAEC,aAAa,EAAEC,WAAW,EAAEC,YAAY,EAAEC,kBAAkB,QAChG,kBAAkB;AACzB,SAASC,MAAM,QAAQ,kBAAkB;AACzC,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,OAAO,QAAQ,gBAAgB;AACxC,SAASC,YAAY,EAAEC,YAAY,EAAEC,kBAAkB,QAAQ,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnG,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EACd,MAAMC,KAAK,GAAGR,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;EAC7B,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAG9C,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC+C,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGhD,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACiD,KAAK,EAAEC,QAAQ,CAAC,GAAGlD,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACmD,OAAO,EAAEC,UAAU,CAAC,GAAGpD,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACqD,SAAS,EAAEC,YAAY,CAAC,GAAGtD,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACuD,OAAO,EAAEC,UAAU,CAAC,GAAGxD,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACyD,WAAW,EAAEC,cAAc,CAAC,GAAG1D,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAAC2D,eAAe,EAAEC,kBAAkB,CAAC,GAAG5D,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM;IAAE6D,MAAM,EAAEC,SAAS;IAAEC,MAAM,EAAEC,SAAS;IAAEC,OAAO,EAAEC;EAAW,CAAC,GAAGlD,aAAa,CAAC,CAAC;EACrF,MAAM;IAAE6C,MAAM,EAAEM,cAAc;IAAEJ,MAAM,EAAEK,cAAc;IAAEH,OAAO,EAAEI;EAAgB,CAAC,GAAGrD,aAAa,CAAC,CAAC;EACpG,MAAM,CAACsD,aAAa,EAAEC,gBAAgB,CAAC,GAAGvE,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACwE,cAAc,EAAEC,iBAAiB,CAAC,GAAGzE,QAAQ,CAAC,MAAM,CAAC;EAC5D,MAAM0E,KAAK,GAAGhD,QAAQ,CAAC,CAAC;EACxB,MAAM,CAACiD,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG5E,QAAQ,CAAC;IAAE6E,UAAU,EAAE,IAAI;IAAEC,QAAQ,EAAE;EAAK,CAAC,CAAC;EAClG,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGhF,QAAQ,CAAC;IAC7CiF,QAAQ,EAAE,EAAE;IAAEC,KAAK,EAAE,EAAE;IAAEC,SAAS,EAAE,EAAE;IAAEC,QAAQ,EAAE,EAAE;IAAEC,QAAQ,EAAE,EAAE;IAClEC,SAAS,EAAE,EAAE;IAAEC,aAAa,EAAE,EAAE;IAAEC,WAAW,EAAE,EAAE;IAAEX,UAAU,EAAE,IAAI;IAAEC,QAAQ,EAAE;EACjF,CAAC,CAAC;EAEF/E,SAAS,CAAC,MAAM;IACd0F,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,QAAQ,GAAGnF,WAAW,CAAC,CAAC;EAC9B,MAAMoF,YAAY,GAAGA,CAAA,KAAM;IAAEzF,iBAAiB,CAAC,CAAC;IAAEwF,QAAQ,CAAC,GAAG,CAAC;EAAE,CAAC;EAClE,MAAME,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAMC,KAAK,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAACC,WAAW,CAAC,CAAC;IAC1CvC,cAAc,CAACoC,KAAK,CAAC;IACrB9C,oBAAoB,CAAC8C,KAAK,KAAK,EAAE,GAAGjD,WAAW,GAAGA,WAAW,CAACqD,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACb,SAAS,IAAIa,OAAO,CAACb,SAAS,CAACW,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACN,KAAK,CAAC,CAAC,CAAC;EACxJ,CAAC;EAED,MAAMO,YAAY,GAAIR,CAAC,IAAK;IAAEb,cAAc,CAACsB,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,CAACT,CAAC,CAACE,MAAM,CAACQ,EAAE,GAAGV,CAAC,CAACE,MAAM,CAACC;IAAM,CAAC,CAAC,CAAC;EAAE,CAAC;EACrG,MAAMQ,iBAAiB,GAAIX,CAAC,IAAK;IAAEtB,gBAAgB,CAACsB,CAAC,CAACE,MAAM,CAACU,KAAK,CAAC,CAAC,CAAC,CAAC;EAAE,CAAC;EACzE,MAAMC,YAAY,GAAG,MAAOb,CAAC,IAAK,CAAE,gBAAiB;EACrD,MAAMc,kBAAkB,GAAId,CAAC,IAAK;IAAE,MAAMe,CAAC,GAAGf,CAAC,CAACE,MAAM,CAACC,KAAK;IAAEvB,iBAAiB,CAACmC,CAAC,CAAC;IAAEC,YAAY,CAACD,CAAC,CAAC;EAAE,CAAC;EACtG,MAAMC,YAAY,GAAIX,MAAM,IAAK,CAAE,gBAAiB;EACpD,MAAMY,iBAAiB,GAAG,MAAAA,CAAA,KAAY,CAAE,gBAAiB;EACzD,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY,CAAE,gBAAiB;EACrD,MAAMC,cAAc,GAAIb,OAAO,IAAK;IAAEvC,kBAAkB,CAACuC,OAAO,CAAC;IAAE/B,cAAc,CAAC,CAAC;EAAE,CAAC;EACtF,eAAe6C,uBAAuBA,CAAA,EAAG,CAAE;EAC3C,eAAexB,cAAcA,CAAA,EAAG,CAAE;EAElC,oBACEhD,OAAA;IAAKyE,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClB1E,OAAA;MAAKyE,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5B1E,OAAA;QAAKyE,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzB1E,OAAA;UAAKyE,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B1E,OAAA;YAAK2E,GAAG,EAAC,0CAA0C;YAACC,GAAG,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACjEhF,OAAA;YAAMyE,SAAS,EAAC,WAAW;YAAAC,QAAA,EAAC;UAAM;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtC,CAAC,eACNhF,OAAA;UAAKyE,SAAS,EAAC,gBAAgB;UAAAC,QAAA,gBAC7B1E,OAAA;YAAGyE,SAAS,EAAC,SAAS;YAAAC,QAAA,EAAC;UAAqB;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eAChDhF,OAAA;YAAKyE,SAAS,EAAC,mBAAmB;YAAAC,QAAA,gBAChC1E,OAAA;cAAOiF,IAAI,EAAC,MAAM;cAACC,WAAW,EAAC,oBAAoB;cAAC3B,KAAK,EAAEvC,WAAY;cAACmE,QAAQ,EAAEhC;YAAa;cAAA0B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC,eAClGhF,OAAA;cAAKyE,SAAS,EAAC,aAAa;cAACE,GAAG,EAAC,qDAAqD;cAACC,GAAG,EAAC;YAAQ;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eACNhF,OAAA;UAAKyE,SAAS,EAAC,cAAc;UAAAC,QAAA,gBAC3B1E,OAAA;YAAQyE,SAAS,EAAC,eAAe;YAAAC,QAAA,eAAC1E,OAAA,CAACN,eAAe;cAAC0F,IAAI,EAAEvF;YAAa;cAAAgF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAClFhF,OAAA;YAAQyE,SAAS,EAAC,eAAe;YAAAC,QAAA,eAAC1E,OAAA,CAACN,eAAe;cAAC0F,IAAI,EAAExF;YAAa;cAAAiF,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAE;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/E,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACNhF,OAAA;QAAKyE,SAAS,EAAC,cAAc;QAAAC,QAAA,EAC1B,CAAC,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,OAAO,EAAE,sBAAsB,EAAE,oBAAoB,EAAE,mBAAmB,CAAC,CAACW,GAAG,CAACC,GAAG,iBAClItF,OAAA;UAAKyE,SAAS,EAAC,UAAU;UAAAC,QAAA,gBACvB1E,OAAA;YAAK2E,GAAG,EAAEY,OAAO,CAAC,YAAYD,GAAG,MAAM,CAAE;YAACV,GAAG,EAAEU;UAAI;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACtDhF,OAAA;YAAA0E,QAAA,EAAOY,GAAG,CAACE,OAAO,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAACA,OAAO,CAAC,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAACC,WAAW,CAAC,CAAC;UAAC;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA,GAFhEM,GAAG;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAG7B,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGH,CAAC;AAEV;AAAC9E,EAAA,CA7EQD,IAAI;EAAA,QAU2D1B,aAAa,EACEA,aAAa,EAGpFU,QAAQ,EAWLnB,WAAW;AAAA;AAAA6H,EAAA,GAzBrB1F,IAAI;AA+Eb,eAAeA,IAAI;AAAC,IAAA0F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}